
TrafficLightProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000964  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000009d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000484a  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  0000541e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ff  00000000  00000000  00005d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00007350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  00007644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b2  00000000  00000000  00007ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00008656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a4 02 	call	0x548	; 0x548 <main>
  74:	0c 94 b0 04 	jmp	0x960	; 0x960 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AppInit>:
volatile uint8_t RedLEDFlag =0;

void AppInit(void)
{

	LED_init(PORT_A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	LED_init(PORT_A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	LED_init(PORT_A,2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	LED_init(PORT_B,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	LED_init(PORT_B,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	LED_init(PORT_B,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 95 02 	call	0x52a	; 0x52a <LED_init>
	Timer_init(Timer0,Normal_Mode,1024,12);
  ac:	2c e0       	ldi	r18, 0x0C	; 12
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	54 e0       	ldi	r21, 0x04	; 4
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 87 04 	call	0x90e	; 0x90e <Timer_init>
	ExternalInterrupt_init(INT0,RISING);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <ExternalInterrupt_init>
  c4:	08 95       	ret

000000c6 <AppStart>:
}
	void AppStart(void)
	{
  c6:	cf 93       	push	r28
		//Start of Normal Mode Loop
		while(PedMode == 0){
  c8:	f9 c0       	rjmp	.+498    	; 0x2bc <AppStart+0x1f6>
			//Car Green Light is on and Pedestrian Red Light is on and that goes for 5 seconds while waiting for any pedestrian to push the button
			LED_off(PORT_A,1);LED_on(PORT_A,0);LED_on(PORT_B,2);LED_off(PORT_B,1);LED_off(PORT_B,0);LED_off(PORT_A,2);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	82 e4       	ldi	r24, 0x42	; 66
  e6:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	82 e4       	ldi	r24, 0x42	; 66
  ee:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
			GreenLEDFlag=1;YellowLEDFlag=0;RedLEDFlag=0;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GreenLEDFlag>
 100:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <YellowLEDFlag>
 104:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TimerStart(Timer0,1024,12);
 108:	4c e0       	ldi	r20, 0x0C	; 12
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	74 e0       	ldi	r23, 0x04	; 4
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
			while (Overflows<20){if (PedMode == 1){break;}}
 116:	04 c0       	rjmp	.+8      	; 0x120 <AppStart+0x5a>
 118:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	21 f0       	breq	.+8      	; 0x128 <AppStart+0x62>
 120:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 124:	84 31       	cpi	r24, 0x14	; 20
 126:	c0 f3       	brcs	.-16     	; 0x118 <AppStart+0x52>
			TimerStop(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
			Overflows=0;
 12e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
			if(PedMode == 1){break;}
 132:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	09 f4       	brne	.+2      	; 0x13c <AppStart+0x76>
 13a:	c5 c0       	rjmp	.+394    	; 0x2c6 <AppStart+0x200>
			//Car Yellow Light and Pedestrian Yellow Light are both flashing for 5 seconds while waiting for any pedestrian to push the button
			LED_off(PORT_A,0);LED_off(PORT_B,2);LED_off(PORT_B,0);LED_off(PORT_A,2);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	82 e4       	ldi	r24, 0x42	; 66
 150:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
			GreenLEDFlag=0;YellowLEDFlag=1;RedLEDFlag=0;
 15c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <GreenLEDFlag>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <YellowLEDFlag>
 166:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TimerStart(Timer0,1024,12);
 16a:	4c e0       	ldi	r20, 0x0C	; 12
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	74 e0       	ldi	r23, 0x04	; 4
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
			for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <AppStart+0xe6>
				LED_toggle(PORT_A,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
				LED_toggle(PORT_B,1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
				while (Overflows<4){if (PedMode == 1){break;}}
 18c:	04 c0       	rjmp	.+8      	; 0x196 <AppStart+0xd0>
 18e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	21 f0       	breq	.+8      	; 0x19e <AppStart+0xd8>
 196:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	c0 f3       	brcs	.-16     	; 0x18e <AppStart+0xc8>
				Overflows=0;
 19e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				if(PedMode == 1){break;}
 1a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <AppStart+0xea>
			if(PedMode == 1){break;}
			//Car Yellow Light and Pedestrian Yellow Light are both flashing for 5 seconds while waiting for any pedestrian to push the button
			LED_off(PORT_A,0);LED_off(PORT_B,2);LED_off(PORT_B,0);LED_off(PORT_A,2);
			GreenLEDFlag=0;YellowLEDFlag=1;RedLEDFlag=0;
			TimerStart(Timer0,1024,12);
			for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 1aa:	cf 5f       	subi	r28, 0xFF	; 255
 1ac:	c5 30       	cpi	r28, 0x05	; 5
 1ae:	30 f3       	brcs	.-52     	; 0x17c <AppStart+0xb6>
				LED_toggle(PORT_B,1);
				while (Overflows<4){if (PedMode == 1){break;}}
				Overflows=0;
				if(PedMode == 1){break;}
			}
			TimerStop(0);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
			Overflows=0;
 1b6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
			if(PedMode == 1){break;}
 1ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <AppStart+0xfe>
 1c2:	81 c0       	rjmp	.+258    	; 0x2c6 <AppStart+0x200>
			//Car Red Light is On and Pedestrian Green Light is On for 5 seconds while waiting for any pedestrian to push the button
			LED_off(PORT_A,1);LED_on(PORT_A,2);LED_on(PORT_B,0);LED_off(PORT_B,1);LED_off(PORT_B,2);LED_off(PORT_A,0);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	82 e4       	ldi	r24, 0x42	; 66
 1e8:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
			GreenLEDFlag=0;YellowLEDFlag=0;RedLEDFlag=1;
 1f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <GreenLEDFlag>
 1f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <YellowLEDFlag>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TimerStart(Timer0,1024,12);
 202:	4c e0       	ldi	r20, 0x0C	; 12
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	74 e0       	ldi	r23, 0x04	; 4
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
			while (Overflows<20){if (PedMode == 1){break;}}
 210:	04 c0       	rjmp	.+8      	; 0x21a <AppStart+0x154>
 212:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	21 f0       	breq	.+8      	; 0x222 <AppStart+0x15c>
 21a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 21e:	84 31       	cpi	r24, 0x14	; 20
 220:	c0 f3       	brcs	.-16     	; 0x212 <AppStart+0x14c>
			TimerStop(0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
			Overflows=0;
 228:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
			if(PedMode == 1){break;}
 22c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f4       	brne	.+2      	; 0x236 <AppStart+0x170>
 234:	48 c0       	rjmp	.+144    	; 0x2c6 <AppStart+0x200>
			//Car Yellow Light and Pedestrian Yellow Light is flashing and Green Pedestrian Light is still On while waiting for any pedestrian to push the button
			LED_off(PORT_A,0);LED_off(PORT_B,2);LED_off(PORT_B,0);LED_off(PORT_A,2);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	82 e4       	ldi	r24, 0x42	; 66
 24a:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
			GreenLEDFlag=0;YellowLEDFlag=1;RedLEDFlag=0;
 256:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <GreenLEDFlag>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <YellowLEDFlag>
 260:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TimerStart(Timer0,1024,12);
 264:	4c e0       	ldi	r20, 0x0C	; 12
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	74 e0       	ldi	r23, 0x04	; 4
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
			for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	18 c0       	rjmp	.+48     	; 0x2a6 <AppStart+0x1e0>
				LED_toggle(PORT_A,1);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e4       	ldi	r24, 0x41	; 65
 27a:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
				LED_toggle(PORT_B,1);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
				while (Overflows<4){if (PedMode == 1){break;}}
 286:	04 c0       	rjmp	.+8      	; 0x290 <AppStart+0x1ca>
 288:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	21 f0       	breq	.+8      	; 0x298 <AppStart+0x1d2>
 290:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	c0 f3       	brcs	.-16     	; 0x288 <AppStart+0x1c2>
				Overflows=0;
 298:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				if(PedMode == 1){break;}
 29c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	19 f0       	breq	.+6      	; 0x2aa <AppStart+0x1e4>
			if(PedMode == 1){break;}
			//Car Yellow Light and Pedestrian Yellow Light is flashing and Green Pedestrian Light is still On while waiting for any pedestrian to push the button
			LED_off(PORT_A,0);LED_off(PORT_B,2);LED_off(PORT_B,0);LED_off(PORT_A,2);
			GreenLEDFlag=0;YellowLEDFlag=1;RedLEDFlag=0;
			TimerStart(Timer0,1024,12);
			for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 2a4:	cf 5f       	subi	r28, 0xFF	; 255
 2a6:	c5 30       	cpi	r28, 0x05	; 5
 2a8:	30 f3       	brcs	.-52     	; 0x276 <AppStart+0x1b0>
				LED_toggle(PORT_B,1);
				while (Overflows<4){if (PedMode == 1){break;}}
				Overflows=0;
				if(PedMode == 1){break;}
			}
			TimerStop(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
			Overflows=0;
 2b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
			if(PedMode == 1){break;}
 2b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <AppStart+0x200>
	ExternalInterrupt_init(INT0,RISING);
}
	void AppStart(void)
	{
		//Start of Normal Mode Loop
		while(PedMode == 0){
 2bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 2c0:	88 23       	and	r24, r24
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <AppStart+0x200>
 2c4:	02 cf       	rjmp	.-508    	; 0xca <AppStart+0x4>
			Overflows=0;
			if(PedMode == 1){break;}
			
		}
		//Start of Pedestrian Mode
		if (PedMode == 1)
 2c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PedMode>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <AppStart+0x20a>
 2ce:	eb c0       	rjmp	.+470    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{
			//Check if button is pressed during a Red light
			if(RedLEDFlag){
 2d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d4:	88 23       	and	r24, r24
 2d6:	09 f4       	brne	.+2      	; 0x2da <AppStart+0x214>
 2d8:	5a c0       	rjmp	.+180    	; 0x38e <AppStart+0x2c8>
				//Car Red Light Stays On and Green Pedestrian Light as well for 5 seconds
				LED_off(PORT_A,1);LED_on(PORT_A,2);LED_on(PORT_B,0);LED_off(PORT_B,1);LED_off(PORT_B,2);LED_off(PORT_A,0);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	81 e4       	ldi	r24, 0x41	; 65
 2e6:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	82 e4       	ldi	r24, 0x42	; 66
 2ee:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	82 e4       	ldi	r24, 0x42	; 66
 2fe:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
				TimerStart(Timer0,1024,12);
 30a:	4c e0       	ldi	r20, 0x0C	; 12
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	74 e0       	ldi	r23, 0x04	; 4
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
				while (Overflows<20);
 318:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 31c:	84 31       	cpi	r24, 0x14	; 20
 31e:	e0 f3       	brcs	.-8      	; 0x318 <AppStart+0x252>
				TimerStop(0);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
				Overflows=0;
 326:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				//Car Yellow Light Starts flashing as well as Pedestrian Yellow Light for 5 seconds while keeping the Green Pedestrian Light On
				LED_off(PORT_A,0);LED_off(PORT_B,2);LED_on(PORT_B,0);LED_off(PORT_A,2);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	81 e4       	ldi	r24, 0x41	; 65
 32e:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	82 e4       	ldi	r24, 0x42	; 66
 336:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
				TimerStart(Timer0,1024,12);
 34a:	4c e0       	ldi	r20, 0x0C	; 12
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	74 e0       	ldi	r23, 0x04	; 4
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	0f c0       	rjmp	.+30     	; 0x37a <AppStart+0x2b4>
					LED_toggle(PORT_A,1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					LED_toggle(PORT_B,1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					while (Overflows<4);
 36c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	e0 f3       	brcs	.-8      	; 0x36c <AppStart+0x2a6>
					Overflows=0;
 374:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				TimerStop(0);
				Overflows=0;
				//Car Yellow Light Starts flashing as well as Pedestrian Yellow Light for 5 seconds while keeping the Green Pedestrian Light On
				LED_off(PORT_A,0);LED_off(PORT_B,2);LED_on(PORT_B,0);LED_off(PORT_A,2);
				TimerStart(Timer0,1024,12);
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 378:	cf 5f       	subi	r28, 0xFF	; 255
 37a:	c5 30       	cpi	r28, 0x05	; 5
 37c:	78 f3       	brcs	.-34     	; 0x35c <AppStart+0x296>
					LED_toggle(PORT_A,1);
					LED_toggle(PORT_B,1);
					while (Overflows<4);
					Overflows=0;
				}
				TimerStop(0);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
				Overflows=0;
 384:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				PedMode=0;
 388:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <PedMode>
 38c:	8c c0       	rjmp	.+280    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			}
			else{
				//Car Yellow Light and Pedestrian Yellow Light start flashing and Red Pedestrian Light is On for 5 seconds
				LED_off(PORT_A,1);LED_on(PORT_B,2);LED_off(PORT_B,1);LED_off(PORT_B,0);LED_off(PORT_A,2);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	81 e4       	ldi	r24, 0x41	; 65
 392:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	82 e4       	ldi	r24, 0x42	; 66
 39a:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	82 e4       	ldi	r24, 0x42	; 66
 3aa:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	81 e4       	ldi	r24, 0x41	; 65
 3b2:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
				TimerStart(Timer0,1024,12);
 3b6:	4c e0       	ldi	r20, 0x0C	; 12
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	74 e0       	ldi	r23, 0x04	; 4
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <AppStart+0x320>
					LED_toggle(PORT_A,1);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	81 e4       	ldi	r24, 0x41	; 65
 3cc:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					LED_toggle(PORT_B,1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	82 e4       	ldi	r24, 0x42	; 66
 3d4:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					while (Overflows<4);
 3d8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 3dc:	84 30       	cpi	r24, 0x04	; 4
 3de:	e0 f3       	brcs	.-8      	; 0x3d8 <AppStart+0x312>
					Overflows=0;
 3e0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
			}
			else{
				//Car Yellow Light and Pedestrian Yellow Light start flashing and Red Pedestrian Light is On for 5 seconds
				LED_off(PORT_A,1);LED_on(PORT_B,2);LED_off(PORT_B,1);LED_off(PORT_B,0);LED_off(PORT_A,2);
				TimerStart(Timer0,1024,12);
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 3e4:	cf 5f       	subi	r28, 0xFF	; 255
 3e6:	c5 30       	cpi	r28, 0x05	; 5
 3e8:	78 f3       	brcs	.-34     	; 0x3c8 <AppStart+0x302>
					LED_toggle(PORT_A,1);
					LED_toggle(PORT_B,1);
					while (Overflows<4);
					Overflows=0;
				}
				TimerStop(0);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
				Overflows=0;
 3f0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				//Car Red Light is On and Green Pedestrian Light is On for 5 seconds
				LED_off(PORT_A,1);LED_on(PORT_B,0);LED_off(PORT_B,1);LED_off(PORT_B,2);LED_on(PORT_A,2);LED_off(PORT_A,0);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 e4       	ldi	r24, 0x41	; 65
 3f8:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	82 e4       	ldi	r24, 0x42	; 66
 400:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e4       	ldi	r24, 0x42	; 66
 408:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	81 e4       	ldi	r24, 0x41	; 65
 418:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	81 e4       	ldi	r24, 0x41	; 65
 420:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
				TimerStart(Timer0,1024,12);
 424:	4c e0       	ldi	r20, 0x0C	; 12
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	74 e0       	ldi	r23, 0x04	; 4
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
				while (Overflows<20);
 432:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 436:	84 31       	cpi	r24, 0x14	; 20
 438:	e0 f3       	brcs	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				TimerStop(0);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
				Overflows=0;
 440:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				//Car Yellow Light and Pedestrian Yellow Light start flashing for 5 seconds while maintaining the Green pedestrian Light
				LED_off(PORT_A,0);LED_off(PORT_B,2);LED_on(PORT_B,0);LED_off(PORT_A,2);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	81 e4       	ldi	r24, 0x41	; 65
 448:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	82 e4       	ldi	r24, 0x42	; 66
 450:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	82 e4       	ldi	r24, 0x42	; 66
 458:	0e 94 99 02 	call	0x532	; 0x532 <LED_on>
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	81 e4       	ldi	r24, 0x41	; 65
 460:	0e 94 9d 02 	call	0x53a	; 0x53a <LED_off>
				TimerStart(Timer0,1024,12);
 464:	4c e0       	ldi	r20, 0x0C	; 12
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	74 e0       	ldi	r23, 0x04	; 4
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 472:	c0 e0       	ldi	r28, 0x00	; 0
 474:	0f c0       	rjmp	.+30     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
					LED_toggle(PORT_A,1);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	81 e4       	ldi	r24, 0x41	; 65
 47a:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					LED_toggle(PORT_B,1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	82 e4       	ldi	r24, 0x42	; 66
 482:	0e 94 a1 02 	call	0x542	; 0x542 <LED_toggle>
					while (Overflows<4);
 486:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	e0 f3       	brcs	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
					Overflows=0;
 48e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				TimerStop(0);
				Overflows=0;
				//Car Yellow Light and Pedestrian Yellow Light start flashing for 5 seconds while maintaining the Green pedestrian Light
				LED_off(PORT_A,0);LED_off(PORT_B,2);LED_on(PORT_B,0);LED_off(PORT_A,2);
				TimerStart(Timer0,1024,12);
				for(uint8_t BlinkingCounter=0;BlinkingCounter<5;BlinkingCounter++){
 492:	cf 5f       	subi	r28, 0xFF	; 255
 494:	c5 30       	cpi	r28, 0x05	; 5
 496:	78 f3       	brcs	.-34     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
					LED_toggle(PORT_A,1);
					LED_toggle(PORT_B,1);
					while (Overflows<4);
					Overflows=0;
				}
				TimerStop(0);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
				Overflows=0;
 49e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Overflows>
				PedMode=0;
 4a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <PedMode>
			}
		}
	}
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <__vector_1>:

ISR(INT0_vect){
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	8f 93       	push	r24
	PedMode = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PedMode>
}
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <__vector_11>:
ISR(TIMER0_OVF_vect){
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
	Overflows++;
 4ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Overflows>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Overflows>
	TimerStop(0);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 90 04 	call	0x920	; 0x920 <TimerStop>
	TimerStart(Timer0,1024,12);
 4fa:	4c e0       	ldi	r20, 0x0C	; 12
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	74 e0       	ldi	r23, 0x04	; 4
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 9f 04 	call	0x93e	; 0x93e <TimerStart>
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <LED_init>:
 */ 

#include "LED.h"
//LED_init function is used to set the pin as digital OUTPUT pin to drive a LED
void LED_init(uint8_t ledPort, uint8_t ledPin){
	pinMode(ledPort,ledPin,OUTPUT);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	0e 94 a9 02 	call	0x552	; 0x552 <pinMode>
 530:	08 95       	ret

00000532 <LED_on>:
}
//LED_on function is used to set the desired LED to be on by putting a HIGH signal on its pin
void LED_on(uint8_t ledPort, uint8_t ledPin){
	digitalWrite(ledPort,ledPin,HIGH);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	0e 94 21 03 	call	0x642	; 0x642 <digitalWrite>
 538:	08 95       	ret

0000053a <LED_off>:
}
//LED_off function is used to set the desired LED to be off by putting a LOW signal on its pin
void LED_off(uint8_t ledPort, uint8_t ledPin){
	digitalWrite(ledPort,ledPin,LOW);
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	0e 94 21 03 	call	0x642	; 0x642 <digitalWrite>
 540:	08 95       	ret

00000542 <LED_toggle>:
}
//LED_toggle function is used to toggle the state of the Desired LED by toggling the corresponding pin
void LED_toggle(uint8_t ledPort, uint8_t ledPin){
	digitalToggle(ledPort,ledPin);
 542:	0e 94 99 03 	call	0x732	; 0x732 <digitalToggle>
 546:	08 95       	ret

00000548 <main>:
#include "Application/Application.h"

int main(){
	AppInit();
 548:	0e 94 3e 00 	call	0x7c	; 0x7c <AppInit>
	while(1){
		AppStart();
 54c:	0e 94 63 00 	call	0xc6	; 0xc6 <AppStart>
 550:	fd cf       	rjmp	.-6      	; 0x54c <main+0x4>

00000552 <pinMode>:
			case 'B':pinState=(PINB&(1<<pinNumber))>>pinNumber;break;
			case 'C':pinState=(PINC&(1<<pinNumber))>>pinNumber;break;
			case 'D':pinState=(PIND&(1<<pinNumber))>>pinNumber;break;
		}
		return pinState;
}
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	29 f1       	breq	.+74     	; 0x5a0 <pinMode+0x4e>
 556:	18 f4       	brcc	.+6      	; 0x55e <pinMode+0xc>
 558:	81 34       	cpi	r24, 0x41	; 65
 55a:	39 f0       	breq	.+14     	; 0x56a <pinMode+0x18>
 55c:	08 95       	ret
 55e:	83 34       	cpi	r24, 0x43	; 67
 560:	d1 f1       	breq	.+116    	; 0x5d6 <pinMode+0x84>
 562:	84 34       	cpi	r24, 0x44	; 68
 564:	09 f4       	brne	.+2      	; 0x568 <pinMode+0x16>
 566:	52 c0       	rjmp	.+164    	; 0x60c <pinMode+0xba>
 568:	08 95       	ret
 56a:	41 30       	cpi	r20, 0x01	; 1
 56c:	59 f4       	brne	.+22     	; 0x584 <pinMode+0x32>
 56e:	2a b3       	in	r18, 0x1a	; 26
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <pinMode+0x28>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <pinMode+0x24>
 57e:	82 2b       	or	r24, r18
 580:	8a bb       	out	0x1a, r24	; 26
 582:	08 95       	ret
 584:	41 11       	cpse	r20, r1
 586:	5c c0       	rjmp	.+184    	; 0x640 <pinMode+0xee>
 588:	2a b3       	in	r18, 0x1a	; 26
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <pinMode+0x42>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <pinMode+0x3e>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	8a bb       	out	0x1a, r24	; 26
 59e:	08 95       	ret
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	59 f4       	brne	.+22     	; 0x5ba <pinMode+0x68>
 5a4:	27 b3       	in	r18, 0x17	; 23
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <pinMode+0x5e>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <pinMode+0x5a>
 5b4:	82 2b       	or	r24, r18
 5b6:	87 bb       	out	0x17, r24	; 23
 5b8:	08 95       	ret
 5ba:	41 11       	cpse	r20, r1
 5bc:	41 c0       	rjmp	.+130    	; 0x640 <pinMode+0xee>
 5be:	27 b3       	in	r18, 0x17	; 23
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <pinMode+0x78>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <pinMode+0x74>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	87 bb       	out	0x17, r24	; 23
 5d4:	08 95       	ret
 5d6:	41 30       	cpi	r20, 0x01	; 1
 5d8:	59 f4       	brne	.+22     	; 0x5f0 <pinMode+0x9e>
 5da:	24 b3       	in	r18, 0x14	; 20
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <pinMode+0x94>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <pinMode+0x90>
 5ea:	82 2b       	or	r24, r18
 5ec:	84 bb       	out	0x14, r24	; 20
 5ee:	08 95       	ret
 5f0:	41 11       	cpse	r20, r1
 5f2:	26 c0       	rjmp	.+76     	; 0x640 <pinMode+0xee>
 5f4:	24 b3       	in	r18, 0x14	; 20
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <pinMode+0xae>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <pinMode+0xaa>
 604:	80 95       	com	r24
 606:	82 23       	and	r24, r18
 608:	84 bb       	out	0x14, r24	; 20
 60a:	08 95       	ret
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	59 f4       	brne	.+22     	; 0x626 <pinMode+0xd4>
 610:	21 b3       	in	r18, 0x11	; 17
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <pinMode+0xca>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <pinMode+0xc6>
 620:	82 2b       	or	r24, r18
 622:	81 bb       	out	0x11, r24	; 17
 624:	08 95       	ret
 626:	41 11       	cpse	r20, r1
 628:	0b c0       	rjmp	.+22     	; 0x640 <pinMode+0xee>
 62a:	21 b3       	in	r18, 0x11	; 17
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <pinMode+0xe4>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <pinMode+0xe0>
 63a:	80 95       	com	r24
 63c:	82 23       	and	r24, r18
 63e:	81 bb       	out	0x11, r24	; 17
 640:	08 95       	ret

00000642 <digitalWrite>:
 642:	82 34       	cpi	r24, 0x42	; 66
 644:	29 f1       	breq	.+74     	; 0x690 <digitalWrite+0x4e>
 646:	18 f4       	brcc	.+6      	; 0x64e <digitalWrite+0xc>
 648:	81 34       	cpi	r24, 0x41	; 65
 64a:	39 f0       	breq	.+14     	; 0x65a <digitalWrite+0x18>
 64c:	08 95       	ret
 64e:	83 34       	cpi	r24, 0x43	; 67
 650:	d1 f1       	breq	.+116    	; 0x6c6 <digitalWrite+0x84>
 652:	84 34       	cpi	r24, 0x44	; 68
 654:	09 f4       	brne	.+2      	; 0x658 <digitalWrite+0x16>
 656:	52 c0       	rjmp	.+164    	; 0x6fc <digitalWrite+0xba>
 658:	08 95       	ret
 65a:	41 30       	cpi	r20, 0x01	; 1
 65c:	59 f4       	brne	.+22     	; 0x674 <digitalWrite+0x32>
 65e:	2b b3       	in	r18, 0x1b	; 27
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <digitalWrite+0x28>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <digitalWrite+0x24>
 66e:	82 2b       	or	r24, r18
 670:	8b bb       	out	0x1b, r24	; 27
 672:	08 95       	ret
 674:	41 11       	cpse	r20, r1
 676:	5c c0       	rjmp	.+184    	; 0x730 <digitalWrite+0xee>
 678:	2b b3       	in	r18, 0x1b	; 27
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <digitalWrite+0x42>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <digitalWrite+0x3e>
 688:	80 95       	com	r24
 68a:	82 23       	and	r24, r18
 68c:	8b bb       	out	0x1b, r24	; 27
 68e:	08 95       	ret
 690:	41 30       	cpi	r20, 0x01	; 1
 692:	59 f4       	brne	.+22     	; 0x6aa <digitalWrite+0x68>
 694:	28 b3       	in	r18, 0x18	; 24
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <digitalWrite+0x5e>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <digitalWrite+0x5a>
 6a4:	82 2b       	or	r24, r18
 6a6:	88 bb       	out	0x18, r24	; 24
 6a8:	08 95       	ret
 6aa:	41 11       	cpse	r20, r1
 6ac:	41 c0       	rjmp	.+130    	; 0x730 <digitalWrite+0xee>
 6ae:	28 b3       	in	r18, 0x18	; 24
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <digitalWrite+0x78>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <digitalWrite+0x74>
 6be:	80 95       	com	r24
 6c0:	82 23       	and	r24, r18
 6c2:	88 bb       	out	0x18, r24	; 24
 6c4:	08 95       	ret
 6c6:	41 30       	cpi	r20, 0x01	; 1
 6c8:	59 f4       	brne	.+22     	; 0x6e0 <digitalWrite+0x9e>
 6ca:	25 b3       	in	r18, 0x15	; 21
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <digitalWrite+0x94>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <digitalWrite+0x90>
 6da:	82 2b       	or	r24, r18
 6dc:	85 bb       	out	0x15, r24	; 21
 6de:	08 95       	ret
 6e0:	41 11       	cpse	r20, r1
 6e2:	26 c0       	rjmp	.+76     	; 0x730 <digitalWrite+0xee>
 6e4:	25 b3       	in	r18, 0x15	; 21
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <digitalWrite+0xae>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <digitalWrite+0xaa>
 6f4:	80 95       	com	r24
 6f6:	82 23       	and	r24, r18
 6f8:	85 bb       	out	0x15, r24	; 21
 6fa:	08 95       	ret
 6fc:	41 30       	cpi	r20, 0x01	; 1
 6fe:	59 f4       	brne	.+22     	; 0x716 <digitalWrite+0xd4>
 700:	22 b3       	in	r18, 0x12	; 18
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <digitalWrite+0xca>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <digitalWrite+0xc6>
 710:	82 2b       	or	r24, r18
 712:	82 bb       	out	0x12, r24	; 18
 714:	08 95       	ret
 716:	41 11       	cpse	r20, r1
 718:	0b c0       	rjmp	.+22     	; 0x730 <digitalWrite+0xee>
 71a:	22 b3       	in	r18, 0x12	; 18
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <digitalWrite+0xe4>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <digitalWrite+0xe0>
 72a:	80 95       	com	r24
 72c:	82 23       	and	r24, r18
 72e:	82 bb       	out	0x12, r24	; 18
 730:	08 95       	ret

00000732 <digitalToggle>:
//digitalToggle Function enters switch statement to decide which pin to toggle its digital State
void digitalToggle(uint8_t portName,uint8_t pinNumber){
			switch(portName){
 732:	82 34       	cpi	r24, 0x42	; 66
 734:	a1 f0       	breq	.+40     	; 0x75e <digitalToggle+0x2c>
 736:	18 f4       	brcc	.+6      	; 0x73e <digitalToggle+0xc>
 738:	81 34       	cpi	r24, 0x41	; 65
 73a:	31 f0       	breq	.+12     	; 0x748 <digitalToggle+0x16>
 73c:	08 95       	ret
 73e:	83 34       	cpi	r24, 0x43	; 67
 740:	c9 f0       	breq	.+50     	; 0x774 <digitalToggle+0x42>
 742:	84 34       	cpi	r24, 0x44	; 68
 744:	11 f1       	breq	.+68     	; 0x78a <digitalToggle+0x58>
 746:	08 95       	ret
				case 'A':PORTA^=(1<<pinNumber);break;
 748:	2b b3       	in	r18, 0x1b	; 27
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <digitalToggle+0x22>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <digitalToggle+0x1e>
 758:	82 27       	eor	r24, r18
 75a:	8b bb       	out	0x1b, r24	; 27
 75c:	08 95       	ret
				case 'B':PORTB^=(1<<pinNumber);break;
 75e:	28 b3       	in	r18, 0x18	; 24
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <digitalToggle+0x38>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	6a 95       	dec	r22
 76c:	e2 f7       	brpl	.-8      	; 0x766 <digitalToggle+0x34>
 76e:	82 27       	eor	r24, r18
 770:	88 bb       	out	0x18, r24	; 24
 772:	08 95       	ret
				case 'C':PORTC^=(1<<pinNumber);break;
 774:	25 b3       	in	r18, 0x15	; 21
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <digitalToggle+0x4e>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <digitalToggle+0x4a>
 784:	82 27       	eor	r24, r18
 786:	85 bb       	out	0x15, r24	; 21
 788:	08 95       	ret
				case 'D':PORTD^=(1<<pinNumber);break;
 78a:	22 b3       	in	r18, 0x12	; 18
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <digitalToggle+0x64>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	6a 95       	dec	r22
 798:	e2 f7       	brpl	.-8      	; 0x792 <digitalToggle+0x60>
 79a:	82 27       	eor	r24, r18
 79c:	82 bb       	out	0x12, r24	; 18
 79e:	08 95       	ret

000007a0 <ExternalInterrupt_init>:
 */ 

#include "Interrupt.h"
//ExternalInterrupt_init Function sets global interrupt flag then sits the corresponding Interrupt Pin Trigger signal and then enables it
void ExternalInterrupt_init(uint8_t InterruptPin,uint8_t Detection){
	SET_BIT(SREG,GIE);
 7a0:	9f b7       	in	r25, 0x3f	; 63
 7a2:	90 68       	ori	r25, 0x80	; 128
 7a4:	9f bf       	out	0x3f, r25	; 63
	switch(InterruptPin){
 7a6:	81 11       	cpse	r24, r1
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <ExternalInterrupt_init+0x32>
		case 0:	if(Detection==RISING){SET_BIT(MCUCR,ISC00);SET_BIT(MCUCR,ISC01);}else if(Detection==FALLING){RESET_BIT(MCUCR,ISC00);SET_BIT(MCUCR,ISC01);}SET_BIT(GICR,INT0E);
 7aa:	61 11       	cpse	r22, r1
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <ExternalInterrupt_init+0x1c>
 7ae:	85 b7       	in	r24, 0x35	; 53
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	85 bf       	out	0x35, r24	; 53
 7b4:	85 b7       	in	r24, 0x35	; 53
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	85 bf       	out	0x35, r24	; 53
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <ExternalInterrupt_init+0x2c>
 7bc:	61 30       	cpi	r22, 0x01	; 1
 7be:	31 f4       	brne	.+12     	; 0x7cc <ExternalInterrupt_init+0x2c>
 7c0:	85 b7       	in	r24, 0x35	; 53
 7c2:	8e 7f       	andi	r24, 0xFE	; 254
 7c4:	85 bf       	out	0x35, r24	; 53
 7c6:	85 b7       	in	r24, 0x35	; 53
 7c8:	82 60       	ori	r24, 0x02	; 2
 7ca:	85 bf       	out	0x35, r24	; 53
 7cc:	8b b7       	in	r24, 0x3b	; 59
 7ce:	80 64       	ori	r24, 0x40	; 64
 7d0:	8b bf       	out	0x3b, r24	; 59
 7d2:	08 95       	ret

000007d4 <PrescaleTimer>:
		case 3:SET_BIT(TCCR0,WGM00);SET_BIT(TCCR0,WGM01);PrescaleTimer(0,Prescaler);Timer_initialValue(0,initValue);break;
	}
}
//PrescalerTimer function is used to set the Prescaler Value of the desired Timer
void PrescaleTimer(uint8_t Timer,uint16_t Prescaler){
	if(Timer==0){
 7d4:	81 11       	cpse	r24, r1
 7d6:	4e c0       	rjmp	.+156    	; 0x874 <__stack+0x15>
			switch(Prescaler){
 7d8:	60 34       	cpi	r22, 0x40	; 64
 7da:	71 05       	cpc	r23, r1
 7dc:	21 f1       	breq	.+72     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7de:	38 f4       	brcc	.+14     	; 0x7ee <PrescaleTimer+0x1a>
 7e0:	61 15       	cp	r22, r1
 7e2:	71 05       	cpc	r23, r1
 7e4:	61 f0       	breq	.+24     	; 0x7fe <PrescaleTimer+0x2a>
 7e6:	68 30       	cpi	r22, 0x08	; 8
 7e8:	71 05       	cpc	r23, r1
 7ea:	99 f0       	breq	.+38     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ec:	3a c0       	rjmp	.+116    	; 0x862 <__stack+0x3>
 7ee:	61 15       	cp	r22, r1
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	78 07       	cpc	r23, r24
 7f4:	11 f1       	breq	.+68     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7f6:	61 15       	cp	r22, r1
 7f8:	74 40       	sbci	r23, 0x04	; 4
 7fa:	49 f1       	breq	.+82     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7fc:	32 c0       	rjmp	.+100    	; 0x862 <__stack+0x3>
				case 0:SET_BIT(TCCR0,CS00);RESET_BIT(TCCR0,CS01);RESET_BIT(TCCR0,CS02);break;
 7fe:	83 b7       	in	r24, 0x33	; 51
 800:	81 60       	ori	r24, 0x01	; 1
 802:	83 bf       	out	0x33, r24	; 51
 804:	83 b7       	in	r24, 0x33	; 51
 806:	8d 7f       	andi	r24, 0xFD	; 253
 808:	83 bf       	out	0x33, r24	; 51
 80a:	83 b7       	in	r24, 0x33	; 51
 80c:	8b 7f       	andi	r24, 0xFB	; 251
 80e:	83 bf       	out	0x33, r24	; 51
 810:	08 95       	ret
				case 8:RESET_BIT(TCCR0,CS00);SET_BIT(TCCR0,CS01);RESET_BIT(TCCR0,CS02);break;
 812:	83 b7       	in	r24, 0x33	; 51
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	83 bf       	out	0x33, r24	; 51
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	83 bf       	out	0x33, r24	; 51
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	8b 7f       	andi	r24, 0xFB	; 251
 822:	83 bf       	out	0x33, r24	; 51
 824:	08 95       	ret
				case 64:SET_BIT(TCCR0,CS00);SET_BIT(TCCR0,CS01);RESET_BIT(TCCR0,CS02);break;
 826:	83 b7       	in	r24, 0x33	; 51
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	82 60       	ori	r24, 0x02	; 2
 830:	83 bf       	out	0x33, r24	; 51
 832:	83 b7       	in	r24, 0x33	; 51
 834:	8b 7f       	andi	r24, 0xFB	; 251
 836:	83 bf       	out	0x33, r24	; 51
 838:	08 95       	ret
				case 256:RESET_BIT(TCCR0,CS00);RESET_BIT(TCCR0,CS01);SET_BIT(TCCR0,CS02);break;
 83a:	83 b7       	in	r24, 0x33	; 51
 83c:	8e 7f       	andi	r24, 0xFE	; 254
 83e:	83 bf       	out	0x33, r24	; 51
 840:	83 b7       	in	r24, 0x33	; 51
 842:	8d 7f       	andi	r24, 0xFD	; 253
 844:	83 bf       	out	0x33, r24	; 51
 846:	83 b7       	in	r24, 0x33	; 51
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	83 bf       	out	0x33, r24	; 51
 84c:	08 95       	ret
				case 1024:SET_BIT(TCCR0,CS00);RESET_BIT(TCCR0,CS01);SET_BIT(TCCR0,CS02);break;
 84e:	83 b7       	in	r24, 0x33	; 51
 850:	81 60       	ori	r24, 0x01	; 1
 852:	83 bf       	out	0x33, r24	; 51
 854:	83 b7       	in	r24, 0x33	; 51
 856:	8d 7f       	andi	r24, 0xFD	; 253
 858:	83 bf       	out	0x33, r24	; 51
 85a:	83 b7       	in	r24, 0x33	; 51
 85c:	84 60       	ori	r24, 0x04	; 4
 85e:	83 bf       	out	0x33, r24	; 51
 860:	08 95       	ret
				default:RESET_BIT(TCCR0,CS00);RESET_BIT(TCCR0,CS01);RESET_BIT(TCCR0,CS02);break;
 862:	83 b7       	in	r24, 0x33	; 51
 864:	8e 7f       	andi	r24, 0xFE	; 254
 866:	83 bf       	out	0x33, r24	; 51
 868:	83 b7       	in	r24, 0x33	; 51
 86a:	8d 7f       	andi	r24, 0xFD	; 253
 86c:	83 bf       	out	0x33, r24	; 51
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	8b 7f       	andi	r24, 0xFB	; 251
 872:	83 bf       	out	0x33, r24	; 51
 874:	08 95       	ret

00000876 <Timer_initialValue>:
			}
	}
}
//Timer_initialValue is used to set the initialValue of the Timer if needed
void Timer_initialValue(uint8_t Timer,uint16_t initValue){
	switch(Timer){
 876:	81 11       	cpse	r24, r1
 878:	04 c0       	rjmp	.+8      	; 0x882 <Timer_initialValue+0xc>
		case 0:TCNT0=initValue;SET_BIT(TIMSK,TOIE0);break;	
 87a:	62 bf       	out	0x32, r22	; 50
 87c:	89 b7       	in	r24, 0x39	; 57
 87e:	81 60       	ori	r24, 0x01	; 1
 880:	89 bf       	out	0x39, r24	; 57
 882:	08 95       	ret

00000884 <Timer0_init>:
	switch(Timer){
		case 0:Timer0_init(Mode,Prescaler,initValue);
	}
}
//Timer0_init function is used to initialize Timer0 with the desired configuration
void Timer0_init(uint8_t Mode,uint16_t Prescaler,uint16_t initValue){
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	ea 01       	movw	r28, r20
	switch(Mode){
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	a1 f0       	breq	.+40     	; 0x8b6 <Timer0_init+0x32>
 88e:	28 f0       	brcs	.+10     	; 0x89a <Timer0_init+0x16>
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	f9 f0       	breq	.+62     	; 0x8d2 <Timer0_init+0x4e>
 894:	83 30       	cpi	r24, 0x03	; 3
 896:	59 f1       	breq	.+86     	; 0x8ee <Timer0_init+0x6a>
 898:	37 c0       	rjmp	.+110    	; 0x908 <Timer0_init+0x84>
		case 0:RESET_BIT(TCCR0,WGM00);RESET_BIT(TCCR0,WGM01);PrescaleTimer(0,Prescaler);Timer_initialValue(0,initValue);break;
 89a:	83 b7       	in	r24, 0x33	; 51
 89c:	8f 7b       	andi	r24, 0xBF	; 191
 89e:	83 bf       	out	0x33, r24	; 51
 8a0:	83 b7       	in	r24, 0x33	; 51
 8a2:	87 7f       	andi	r24, 0xF7	; 247
 8a4:	83 bf       	out	0x33, r24	; 51
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PrescaleTimer>
 8ac:	be 01       	movw	r22, r28
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0e 94 3b 04 	call	0x876	; 0x876 <Timer_initialValue>
 8b4:	29 c0       	rjmp	.+82     	; 0x908 <Timer0_init+0x84>
		case 1:SET_BIT(TCCR0,WGM00);RESET_BIT(TCCR0,WGM01);PrescaleTimer(0,Prescaler);Timer_initialValue(0,initValue);break;
 8b6:	83 b7       	in	r24, 0x33	; 51
 8b8:	80 64       	ori	r24, 0x40	; 64
 8ba:	83 bf       	out	0x33, r24	; 51
 8bc:	83 b7       	in	r24, 0x33	; 51
 8be:	87 7f       	andi	r24, 0xF7	; 247
 8c0:	83 bf       	out	0x33, r24	; 51
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PrescaleTimer>
 8c8:	be 01       	movw	r22, r28
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	0e 94 3b 04 	call	0x876	; 0x876 <Timer_initialValue>
 8d0:	1b c0       	rjmp	.+54     	; 0x908 <Timer0_init+0x84>
		case 2:RESET_BIT(TCCR0,WGM00);SET_BIT(TCCR0,WGM01);PrescaleTimer(0,Prescaler);Timer_initialValue(0,initValue);break;
 8d2:	83 b7       	in	r24, 0x33	; 51
 8d4:	8f 7b       	andi	r24, 0xBF	; 191
 8d6:	83 bf       	out	0x33, r24	; 51
 8d8:	83 b7       	in	r24, 0x33	; 51
 8da:	88 60       	ori	r24, 0x08	; 8
 8dc:	83 bf       	out	0x33, r24	; 51
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PrescaleTimer>
 8e4:	be 01       	movw	r22, r28
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	0e 94 3b 04 	call	0x876	; 0x876 <Timer_initialValue>
 8ec:	0d c0       	rjmp	.+26     	; 0x908 <Timer0_init+0x84>
		case 3:SET_BIT(TCCR0,WGM00);SET_BIT(TCCR0,WGM01);PrescaleTimer(0,Prescaler);Timer_initialValue(0,initValue);break;
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	80 64       	ori	r24, 0x40	; 64
 8f2:	83 bf       	out	0x33, r24	; 51
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	88 60       	ori	r24, 0x08	; 8
 8f8:	83 bf       	out	0x33, r24	; 51
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PrescaleTimer>
 900:	be 01       	movw	r22, r28
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	0e 94 3b 04 	call	0x876	; 0x876 <Timer_initialValue>
	}
}
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	08 95       	ret

0000090e <Timer_init>:
 */ 

#include "Timer.h"
//Timer_init function to select the desired timer initializing sequence 
void Timer_init(uint8_t Timer,uint8_t Mode,uint16_t Prescaler,uint16_t initValue){
	switch(Timer){
 90e:	81 11       	cpse	r24, r1
 910:	06 c0       	rjmp	.+12     	; 0x91e <Timer_init+0x10>
 912:	fa 01       	movw	r30, r20
 914:	86 2f       	mov	r24, r22
		case 0:Timer0_init(Mode,Prescaler,initValue);
 916:	a9 01       	movw	r20, r18
 918:	bf 01       	movw	r22, r30
 91a:	0e 94 42 04 	call	0x884	; 0x884 <Timer0_init>
 91e:	08 95       	ret

00000920 <TimerStop>:
		case 0:TCNT0=initValue;SET_BIT(TIMSK,TOIE0);break;	
	}
}
//TimerStop is used to Stop and reset the desired Timer through a switch statement
void TimerStop(uint8_t Timer){
	switch(Timer){
 920:	81 11       	cpse	r24, r1
 922:	0c c0       	rjmp	.+24     	; 0x93c <TimerStop+0x1c>
		case 0:RESET_BIT(TCCR0,CS00);RESET_BIT(TCCR0,CS01);RESET_BIT(TCCR0,CS02);SET_BIT(TIFR,0);break;
 924:	83 b7       	in	r24, 0x33	; 51
 926:	8e 7f       	andi	r24, 0xFE	; 254
 928:	83 bf       	out	0x33, r24	; 51
 92a:	83 b7       	in	r24, 0x33	; 51
 92c:	8d 7f       	andi	r24, 0xFD	; 253
 92e:	83 bf       	out	0x33, r24	; 51
 930:	83 b7       	in	r24, 0x33	; 51
 932:	8b 7f       	andi	r24, 0xFB	; 251
 934:	83 bf       	out	0x33, r24	; 51
 936:	88 b7       	in	r24, 0x38	; 56
 938:	81 60       	ori	r24, 0x01	; 1
 93a:	88 bf       	out	0x38, r24	; 56
 93c:	08 95       	ret

0000093e <TimerStart>:
	}
}
//TimerStart is used to initialize and start the desired Timer through a switch statement
void TimerStart(uint8_t Timer,uint16_t Prescaler,uint16_t initValue){
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
	switch(Timer){
 944:	81 11       	cpse	r24, r1
 946:	08 c0       	rjmp	.+16     	; 0x958 <TimerStart+0x1a>
 948:	8a 01       	movw	r16, r20
 94a:	c8 2f       	mov	r28, r24
	case 0:PrescaleTimer(Timer,Prescaler);Timer_initialValue(Timer,initValue);break;
 94c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PrescaleTimer>
 950:	b8 01       	movw	r22, r16
 952:	8c 2f       	mov	r24, r28
 954:	0e 94 3b 04 	call	0x876	; 0x876 <Timer_initialValue>
	}
}
 958:	cf 91       	pop	r28
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	08 95       	ret

00000960 <_exit>:
 960:	f8 94       	cli

00000962 <__stop_program>:
 962:	ff cf       	rjmp	.-2      	; 0x962 <__stop_program>
